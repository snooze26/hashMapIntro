Creating a hashmap 

Create a hashmap class with constructors(loadFactor = 0.75, capacity = 16, size, bucket)
bucket = new Array(capacity).fill(null).map(() => [])

create a function that takes the key and produces a hash code with it 
****(if help is needed go look at the odin on the hashmap lesson. make sure that you follow the version of code that has the prime number)****

hash(key) {
	create hashCode temp variable assign to 0 
	create a const primeNumber variable assign to 13
	give each character in key a value  
		(i = 0; i < key.length; i++ 
		hashCode = product of (primeNumber/hashCode) + key.charCodeAt(i);)
	modulo the hashCode with the bucket size 
		hashCode = hashCode % 16 
	return hashCode 
}

create a function when the size of our map exceeds 12  
resize() { 
	create the new capacity size 
	create the new bucket 
	for i = 0; i less than old bucket's length; incremenet i 
		for const key, value inside of old bucket[i]
			newIndex is assigned the key hashed 
			newBucket's newindex pushes the key and value 
	capacity becomes newapacity 
	bucket becomes newBucket
 }
			
		

Create a function to set a value at a specific key if the key already has a value then update that value with the new value

set(key, value){
	create a array called bucket and assign it to the HM bucket
	create a index variable that is assigned to hash(key)
	i = 0; i < bucket.length; i++
		if (bucket[i][0] == key) if bucket key equals bucket key  
			bucket[i][1] = value; 
			return 
	if key doesn't exist in bucket add it to the bucket list 
	increment size
	reize the hash table if the lf is exceeded 
	if size / capacting is greater than loadFactor 
		run resize for the map 
	

create a get function that takes an arguement of key and returns 
the value if it assigned to the located key if not found then return null 

get(key) {
	check if bucket is null if it is then return null
	create a index variable that is assigned to hash(key)
	create a bucket array that is assigned to the bucket index 
	loop through the bucket 
		create a newIndex variable that is assigned to the index value (bucket[i][0])
		if newIndex === key 
			return the value of the value in bucket (bucket[i][1])
	return null
}


create a function that takes a key as an argument and return true or false 
based on whether or not the key is in the hash map 
has(key) { 
	check if bucket is null if it is then return null
	create a index variable that is assigned to hash(key)
	create a bucket array that is assigned to the bucket index 
	loop through the bucket 
		create a newIndex variable that is assigned to the index value (bucket[i][0])
		if newIndex === key 
			return the value of the value in bucket (bucket[i][1])
	return false 
}

remove(key) { 
	check if bucket is null if it is then return null
	create a index variable that is assigned to hash(key)
	create a bucket array that is assigned to the bucket index 
	loop through the bucket 
		create a newIndex variable that is assigned to the index value (bucket[i][0])
		if newIndex === key 
			make the array empty  
		else 
			return false 
}


length(){ 
	return size 
}


clear(){ 
	Check if the list is empty IF it is then return null 
	iterate through the bucket list for when i is less than or equal to list size 
		if the bucket inside the bucket list is not an empty array  
			make the bucket element an empty array  
			decrement the size of the map  
	return bucket;
}


keys() { 
	Check if the list is empty IF it is then return null 
	iterate through the bucket list for when i is less than or equal to list size
		inside a for loop create two new variables in an array called key , value 
		set the for loop condition to for key and value of this bucket's index 
			log the key   
}


values() { 
	Check if the list is empty IF it is then return null 
	iterate through the bucket list for when i is less than or equal to list size
		inside a for loop create two new variables in an array called key , value 
		set the for loop condition to for key and value of this bucket's index 
			log the value 


entries() { 
	check if the list is empty If it is then return null 
	create a array called bucket and assign it to the hm bucket 
	create a array called keyValues set it as an empty array 
	while the buckets' key and values are true 
		add them both to the keyValues array as a pair 
	return the keyValues array 
}
-
		





	
		
		




	
	
	

